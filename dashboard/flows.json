[
    {
        "id": "330925b12c345bae",
        "type": "tab",
        "label": "Flow 1",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "518c072319764d69",
        "type": "mqtt-broker",
        "name": "basic_mqtt",
        "broker": "192.168.0.105",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "f59f87f12c984d51",
        "type": "ui_tab",
        "name": "Home",
        "icon": "dashboard",
        "disabled": false,
        "hidden": false
    },
    {
        "id": "d8d28dbd9ef8409c",
        "type": "ui_base",
        "theme": {
            "name": "theme-light",
            "lightTheme": {
                "default": "#0094CE",
                "baseColor": "#0094CE",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "darkTheme": {
                "default": "#097479",
                "baseColor": "#097479",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": false
            },
            "customTheme": {
                "name": "Untitled Theme 1",
                "default": "#4B7930",
                "baseColor": "#4B7930",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
            },
            "themeState": {
                "base-color": {
                    "default": "#0094CE",
                    "value": "#0094CE",
                    "edited": false
                },
                "page-titlebar-backgroundColor": {
                    "value": "#0094CE",
                    "edited": false
                },
                "page-backgroundColor": {
                    "value": "#fafafa",
                    "edited": false
                },
                "page-sidebar-backgroundColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "group-textColor": {
                    "value": "#1bbfff",
                    "edited": false
                },
                "group-borderColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "group-backgroundColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "widget-textColor": {
                    "value": "#111111",
                    "edited": false
                },
                "widget-backgroundColor": {
                    "value": "#0094ce",
                    "edited": false
                },
                "widget-borderColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "base-font": {
                    "value": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
                }
            },
            "angularTheme": {
                "primary": "indigo",
                "accents": "blue",
                "warn": "red",
                "background": "grey",
                "palette": "light"
            }
        },
        "site": {
            "name": "Node-RED Dashboard",
            "hideToolbar": "false",
            "allowSwipe": "false",
            "lockMenu": "false",
            "allowTempTheme": "true",
            "dateFormat": "DD/MM/YYYY",
            "sizes": {
                "sx": 48,
                "sy": 48,
                "gx": 6,
                "gy": 6,
                "cx": 6,
                "cy": 6,
                "px": 0,
                "py": 0
            }
        }
    },
    {
        "id": "d471f594c96345ae",
        "type": "ui_group",
        "name": "Door Sensor",
        "tab": "f59f87f12c984d51",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "059be70907183568",
        "type": "ui_group",
        "name": "Sink Sensor",
        "tab": "f59f87f12c984d51",
        "order": 2,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "44e1485eed6a64c0",
        "type": "ui_group",
        "name": "Toilet Sensor",
        "tab": "f59f87f12c984d51",
        "order": 3,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "7446bbc156a823c9",
        "type": "ui_spacer",
        "z": "330925b12c345bae",
        "name": "spacer",
        "group": "d471f594c96345ae",
        "order": 3,
        "width": 4,
        "height": 1
    },
    {
        "id": "012287986abbebe5",
        "type": "ui_spacer",
        "z": "330925b12c345bae",
        "name": "spacer",
        "group": "d471f594c96345ae",
        "order": 4,
        "width": 4,
        "height": 1
    },
    {
        "id": "e3427cd945d1c38b",
        "type": "ui_spacer",
        "z": "330925b12c345bae",
        "name": "spacer",
        "group": "d471f594c96345ae",
        "order": 5,
        "width": 4,
        "height": 1
    },
    {
        "id": "632bc41ff151502f",
        "type": "ui_spacer",
        "z": "330925b12c345bae",
        "name": "spacer",
        "group": "d471f594c96345ae",
        "order": 6,
        "width": 4,
        "height": 1
    },
    {
        "id": "b5000c530ba5b700",
        "type": "ui_spacer",
        "z": "330925b12c345bae",
        "name": "spacer",
        "group": "d471f594c96345ae",
        "order": 7,
        "width": 4,
        "height": 1
    },
    {
        "id": "b484953fd4c0b88a",
        "type": "mqtt in",
        "z": "330925b12c345bae",
        "name": "",
        "topic": "test/tof1",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "518c072319764d69",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 120,
        "y": 340,
        "wires": [
            [
                "4615719abf1d82a5"
            ]
        ]
    },
    {
        "id": "be24f2f514ae1aa8",
        "type": "mqtt in",
        "z": "330925b12c345bae",
        "name": "",
        "topic": "test/thermal1",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "518c072319764d69",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 130,
        "y": 280,
        "wires": [
            [
                "de940f5022e25666"
            ]
        ]
    },
    {
        "id": "bd16dc87181738e5",
        "type": "mqtt in",
        "z": "330925b12c345bae",
        "name": "",
        "topic": "test/tof2",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "518c072319764d69",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 120,
        "y": 540,
        "wires": [
            [
                "403e6f0d2e79938e"
            ]
        ]
    },
    {
        "id": "cb8ad901bab47efa",
        "type": "mqtt in",
        "z": "330925b12c345bae",
        "name": "",
        "topic": "test/height1",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "518c072319764d69",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 130,
        "y": 80,
        "wires": [
            [
                "9bd771e17b82f56e"
            ]
        ]
    },
    {
        "id": "738d54e7db2bc3f0",
        "type": "mqtt in",
        "z": "330925b12c345bae",
        "name": "",
        "topic": "test/height2",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "518c072319764d69",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 130,
        "y": 140,
        "wires": [
            [
                "885eaaf32c6c4419"
            ]
        ]
    },
    {
        "id": "79b43359c06eeca5",
        "type": "mqtt in",
        "z": "330925b12c345bae",
        "name": "",
        "topic": "test/button1",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "518c072319764d69",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 130,
        "y": 680,
        "wires": [
            [
                "de4923a84653bf99"
            ]
        ]
    },
    {
        "id": "5c36094d3ada4ebf",
        "type": "mqtt in",
        "z": "330925b12c345bae",
        "name": "",
        "topic": "test/thermal2",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "518c072319764d69",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 130,
        "y": 480,
        "wires": [
            [
                "3d75e3ec61647844"
            ]
        ]
    },
    {
        "id": "de4923a84653bf99",
        "type": "ui_toast",
        "z": "330925b12c345bae",
        "position": "top right",
        "displayTime": "3",
        "highlight": "",
        "sendall": true,
        "outputs": 0,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "className": "",
        "topic": "",
        "name": "",
        "x": 310,
        "y": 680,
        "wires": []
    },
    {
        "id": "403e6f0d2e79938e",
        "type": "ui_chart",
        "z": "330925b12c345bae",
        "name": "",
        "group": "059be70907183568",
        "order": 2,
        "width": 0,
        "height": 0,
        "label": "Sink ToF",
        "chartType": "line",
        "legend": "false",
        "xformat": "mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": "5",
        "removeOlderPoints": "",
        "removeOlderUnit": "1",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 260,
        "y": 540,
        "wires": [
            []
        ]
    },
    {
        "id": "4615719abf1d82a5",
        "type": "ui_chart",
        "z": "330925b12c345bae",
        "name": "",
        "group": "44e1485eed6a64c0",
        "order": 2,
        "width": 0,
        "height": 0,
        "label": "Toilet ToF",
        "chartType": "line",
        "legend": "false",
        "xformat": "mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": "5",
        "removeOlderPoints": "",
        "removeOlderUnit": "1",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 260,
        "y": 340,
        "wires": [
            []
        ]
    },
    {
        "id": "de940f5022e25666",
        "type": "function",
        "z": "330925b12c345bae",
        "name": "split funtion",
        "func": "var result;\nresult = msg.payload.split(',');\nmsg.payload = result;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 290,
        "y": 280,
        "wires": [
            [
                "f7b32b39610a2537"
            ]
        ]
    },
    {
        "id": "24e92a10b6e9a951",
        "type": "ui_heat_map",
        "z": "330925b12c345bae",
        "group": "44e1485eed6a64c0",
        "order": 1,
        "width": 6,
        "height": 5,
        "name": "toilet",
        "rows": "8",
        "columns": "8",
        "minMax": true,
        "minimumValue": "15",
        "maximumValue": "30",
        "backgroundType": "color",
        "backgroundColor": "#ffffff",
        "image": "never",
        "radius": 40,
        "opacity": 0.6,
        "blur": 0.85,
        "showValues": false,
        "gridType": "none",
        "valuesDecimals": 0,
        "showLegend": false,
        "legendType": "none",
        "legendDecimals": 0,
        "legendCount": 2,
        "x": 1150,
        "y": 280,
        "wires": [
            []
        ]
    },
    {
        "id": "3d75e3ec61647844",
        "type": "function",
        "z": "330925b12c345bae",
        "name": "split funtion",
        "func": "var result;\nresult = msg.payload.split(',');\nmsg.payload = result;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 290,
        "y": 480,
        "wires": [
            [
                "8ffb26cb7cb466cb"
            ]
        ]
    },
    {
        "id": "3f9c7ef3398fdba8",
        "type": "ui_heat_map",
        "z": "330925b12c345bae",
        "group": "059be70907183568",
        "order": 1,
        "width": 6,
        "height": 5,
        "name": "sink",
        "rows": "8",
        "columns": "8",
        "minMax": true,
        "minimumValue": "15",
        "maximumValue": "30",
        "backgroundType": "color",
        "backgroundColor": "#ffffff",
        "image": "never",
        "radius": 40,
        "opacity": 0.6,
        "blur": 0.85,
        "showValues": false,
        "gridType": "none",
        "valuesDecimals": 0,
        "showLegend": false,
        "legendType": "none",
        "legendDecimals": 0,
        "legendCount": 2,
        "x": 1150,
        "y": 480,
        "wires": [
            []
        ]
    },
    {
        "id": "f7b32b39610a2537",
        "type": "function",
        "z": "330925b12c345bae",
        "name": "2d_array",
        "func": "function convert1Dto2D(arr, numCols) {\n  const result = [];\n\n  for (let i = 0; i < arr.length; i += numCols) {\n    result.push(arr.slice(i, i + numCols));\n  }\n\n  return result;\n}\n\nconst arr = msg.payload;\nconst numCols = 8;\n\nmsg.payload = convert1Dto2D(arr, numCols);\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 440,
        "y": 280,
        "wires": [
            [
                "582bb7539a19164c"
            ]
        ]
    },
    {
        "id": "3d21635350d4d82d",
        "type": "function",
        "z": "330925b12c345bae",
        "name": "transpose",
        "func": "function transpose(matrix) {\n  return matrix[0].map((_, colIndex) => matrix.map(row => row[colIndex]));\n}\n\nvar input = msg.payload;\n\nmsg.payload = transpose(input);\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 740,
        "y": 280,
        "wires": [
            [
                "99f991177ba60119"
            ]
        ]
    },
    {
        "id": "8ffb26cb7cb466cb",
        "type": "function",
        "z": "330925b12c345bae",
        "name": "2d_array",
        "func": "function convert1Dto2D(arr, numCols) {\n  const result = [];\n\n  for (let i = 0; i < arr.length; i += numCols) {\n    result.push(arr.slice(i, i + numCols));\n  }\n\n  return result;\n}\n\nconst arr = msg.payload;\nconst numCols = 8;\n\nmsg.payload = convert1Dto2D(arr, numCols);\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 440,
        "y": 480,
        "wires": [
            [
                "3af4d572b48581a1"
            ]
        ]
    },
    {
        "id": "1998f56ced8bd005",
        "type": "function",
        "z": "330925b12c345bae",
        "name": "flat",
        "func": "msg.payload = msg.payload.flat();\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1030,
        "y": 280,
        "wires": [
            [
                "24e92a10b6e9a951"
            ]
        ]
    },
    {
        "id": "43c7e40137392cc1",
        "type": "function",
        "z": "330925b12c345bae",
        "name": "flat",
        "func": "msg.payload = msg.payload.flat();\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1030,
        "y": 480,
        "wires": [
            [
                "3f9c7ef3398fdba8"
            ]
        ]
    },
    {
        "id": "9bd771e17b82f56e",
        "type": "function",
        "z": "330925b12c345bae",
        "name": "split funtion",
        "func": "var result;\nresult = msg.payload.split(',');\nmsg.payload = result;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 290,
        "y": 80,
        "wires": [
            [
                "06aa2efbc603dc92"
            ]
        ]
    },
    {
        "id": "885eaaf32c6c4419",
        "type": "function",
        "z": "330925b12c345bae",
        "name": "split funtion",
        "func": "var result;\nresult = msg.payload.split(',');\nmsg.payload = result;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 290,
        "y": 140,
        "wires": [
            [
                "937c328f03d8083c"
            ]
        ]
    },
    {
        "id": "06aa2efbc603dc92",
        "type": "ui_heat_map",
        "z": "330925b12c345bae",
        "group": "d471f594c96345ae",
        "order": 1,
        "width": 1,
        "height": 5,
        "name": "height1",
        "rows": "5",
        "columns": "1",
        "minMax": true,
        "minimumValue": "200",
        "maximumValue": "1200",
        "backgroundType": "color",
        "backgroundColor": "#ffffff",
        "image": "never",
        "radius": 40,
        "opacity": 0.6,
        "blur": 0.85,
        "showValues": false,
        "gridType": "none",
        "valuesDecimals": 0,
        "showLegend": false,
        "legendType": "none",
        "legendDecimals": 0,
        "legendCount": 2,
        "x": 440,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "937c328f03d8083c",
        "type": "ui_heat_map",
        "z": "330925b12c345bae",
        "group": "d471f594c96345ae",
        "order": 2,
        "width": 1,
        "height": 5,
        "name": "height2",
        "rows": "5",
        "columns": "1",
        "minMax": true,
        "minimumValue": "200",
        "maximumValue": "1200",
        "backgroundType": "color",
        "backgroundColor": "#ffffff",
        "image": "never",
        "radius": 40,
        "opacity": 0.6,
        "blur": 0.85,
        "showValues": false,
        "gridType": "none",
        "valuesDecimals": 0,
        "showLegend": false,
        "legendType": "none",
        "legendDecimals": 0,
        "legendCount": 2,
        "x": 440,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "3bfb6dd03771c505",
        "type": "comment",
        "z": "330925b12c345bae",
        "name": "Toilet Sensor",
        "info": "",
        "x": 130,
        "y": 240,
        "wires": []
    },
    {
        "id": "30bb24a7854fe757",
        "type": "comment",
        "z": "330925b12c345bae",
        "name": "Sink Sensor",
        "info": "",
        "x": 130,
        "y": 440,
        "wires": []
    },
    {
        "id": "a372bfe40594ee5f",
        "type": "comment",
        "z": "330925b12c345bae",
        "name": "Door Sensor",
        "info": "",
        "x": 130,
        "y": 40,
        "wires": []
    },
    {
        "id": "b91545d6f9bca9db",
        "type": "comment",
        "z": "330925b12c345bae",
        "name": "Button",
        "info": "",
        "x": 110,
        "y": 640,
        "wires": []
    },
    {
        "id": "54b7cab19ec046b9",
        "type": "function",
        "z": "330925b12c345bae",
        "name": "transpose",
        "func": "function transpose(matrix) {\n  return matrix[0].map((_, colIndex) => matrix.map(row => row[colIndex]));\n}\n\nvar input = msg.payload;\n\nmsg.payload = transpose(input);\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 740,
        "y": 480,
        "wires": [
            [
                "a328e0fda16277c8"
            ]
        ]
    },
    {
        "id": "582bb7539a19164c",
        "type": "function",
        "z": "330925b12c345bae",
        "name": "flip vertically",
        "func": "function flipVertically(matrix) {\n  const flippedMatrix = [];\n\n  for (let i = 0; i < matrix.length; i++) {\n    flippedMatrix.push(matrix[i].slice().reverse()); // Create a copy of each row and reverse it\n  }\n\n  return flippedMatrix;\n}\n\nconst matrix = msg.payload;\n\nmsg.payload = flipVertically(matrix);\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 590,
        "y": 280,
        "wires": [
            [
                "3d21635350d4d82d"
            ]
        ]
    },
    {
        "id": "99f991177ba60119",
        "type": "function",
        "z": "330925b12c345bae",
        "name": "flip vertically",
        "func": "function flipVertically(matrix) {\n  const flippedMatrix = [];\n\n  for (let i = 0; i < matrix.length; i++) {\n    flippedMatrix.push(matrix[i].slice().reverse()); // Create a copy of each row and reverse it\n  }\n\n  return flippedMatrix;\n}\n\nconst matrix = msg.payload;\n\nmsg.payload = flipVertically(matrix);\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 890,
        "y": 280,
        "wires": [
            [
                "1998f56ced8bd005"
            ]
        ]
    },
    {
        "id": "3af4d572b48581a1",
        "type": "function",
        "z": "330925b12c345bae",
        "name": "flip vertically",
        "func": "function flipVertically(matrix) {\n  const flippedMatrix = [];\n\n  for (let i = 0; i < matrix.length; i++) {\n    flippedMatrix.push(matrix[i].slice().reverse()); // Create a copy of each row and reverse it\n  }\n\n  return flippedMatrix;\n}\n\nconst matrix = msg.payload;\n\nmsg.payload = flipVertically(matrix);\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 590,
        "y": 480,
        "wires": [
            [
                "54b7cab19ec046b9"
            ]
        ]
    },
    {
        "id": "a328e0fda16277c8",
        "type": "function",
        "z": "330925b12c345bae",
        "name": "flip vertically",
        "func": "function flipVertically(matrix) {\n  const flippedMatrix = [];\n\n  for (let i = 0; i < matrix.length; i++) {\n    flippedMatrix.push(matrix[i].slice().reverse()); // Create a copy of each row and reverse it\n  }\n\n  return flippedMatrix;\n}\n\nconst matrix = msg.payload;\n\nmsg.payload = flipVertically(matrix);\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 890,
        "y": 480,
        "wires": [
            [
                "43c7e40137392cc1"
            ]
        ]
    },
    {
        "id": "ae29396ce691c48f",
        "type": "comment",
        "z": "330925b12c345bae",
        "name": "Position model",
        "info": "",
        "x": 140,
        "y": 760,
        "wires": []
    },
    {
        "id": "7b935492b70591a0",
        "type": "mqtt in",
        "z": "330925b12c345bae",
        "name": "",
        "topic": "test/position",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "518c072319764d69",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 130,
        "y": 800,
        "wires": [
            [
                "7ccf87a3c812a2cb"
            ]
        ]
    },
    {
        "id": "7ccf87a3c812a2cb",
        "type": "ui_text",
        "z": "330925b12c345bae",
        "group": "d471f594c96345ae",
        "order": 8,
        "width": 6,
        "height": 2,
        "name": "Model Result",
        "label": "Model Result",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 310,
        "y": 800,
        "wires": []
    }
]